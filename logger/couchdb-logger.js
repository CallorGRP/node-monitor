/*******************************************************************************
* couchdb-logger.js - A node-monitor logger for logging to a CouchDB database
********************************************************************************
*/

// Dependencies
var deps = require('../deps');
var _ = deps._;
var couchdb = require('couch-client');
var config = deps.config('couchdb-logger', {
  defaultOpts: {
    dbHost: "localhost",
    dbPort: 5984,
    dbName: "monitor-log",
    id:"{{monitor.getModuleName()}}-{{monitor.getName()}}-{{Date.now()}}"
  }
});

/******************************************************************************* 
* CouchdbLogger
********************************************************************************
* This returns a logger function which inserts the log information into a
* CouchDB database.
* 
* For example, if you're following the node-config and node-monitor patterns, 
* and the following is at the top of your Customer module:
* 
*   var config = require('config')('Customer'); 
*   var monitor = require('monitor')('Customer', config.monitors);
*   
* And your deployment configuration defines this logger as the errorLogger
* 
*   // production.js - Configurations for the production deployment
*   module.exports = {
*     'Customer': {
*       'monitors': {
*         'default': {
*           errorLogger: 
*             require('monitor/couchdb-logger')({dbName:"customer-err"})
*         }
*       }
*     }
*   }
*   
* Then the following monitor will insert a document into the "customer-err"
* database at localhost:5984:
*   
*   monitor.error('Customer save error', {error:err, customer:customer});
*   
* The inserted document will look like this:
* {
*   _id:"Customer-Customer save error-1290326861785,
*   _rev:(generated by couchdb),
*   moduleName:"Customer",
*   monitorName:"Customer save error",
*   date: "2010-11-20 12:03:42.239",
*   timestamp: 1290326861785,
*   isError:true,
*   error: (the error object passed)
* }
* 
* Event documents look like this:
* {
*   _id:"Customer-(Monitor name)-1290326861785",
*   _rev:(generated by couchdb),
*   moduleName:"Customer",
*   monitorName:(Monitor name),
*   date: "2010-11-20 12:03:42.239",
*   timestamp: 1290326861785,
*   isEvent:true,
*   value: (value of the event),
*   data: (the data object passed - if any)
* }
*   
*
* Input:
*   options - An optional options object, with the following elements:
*     dbHost: Database host name (default: "localhost")
*     dbPort: Database port (default 5984)
*     dbName: Name of the database (default: "monitor-log")
*     dbDoc: (optional) An object to mix into the document before insertion
*     id: Mustache style template for the id (or null to have couchdb determine)
*       (default:"{{monitor.getModuleName()}}-{{monitor.getName()}}-{{Date.now()}}")
*     mock: (boolean) Set this to true to prevent actual sending to the database.
*       A mock object is returned.  This is for testing.  Default: false
*     
*   callback(err, document) - An optional function to call after DB insertion
*     err - Any database error.  Null if the insert was successful
*     document - The inserted document, with _id and _rev
*/
var CouchdbLogger = module.exports = function(options, callback) {

  // Build the actual options object based on defaults
  var opts = _.extendDeep({}, config.defaultOpts, options);

  // Get a database connection
  var couchUrl = "http://" + opts.dbHost + ":" + opts.dbPort + "/" + opts.dbName;
  var db = couchdb(couchUrl);

  // Build a new couchdb insert function
  var loggerFunction = function(message, value, data, monitor) {

    // Build the ID if there's a template
    var id = null;
    if (opts.id) {

      // Build the object to pass to the template engine
      var obj = {message:message, value:value, data:data, monitor:monitor};

      // Apply the template to the options, using mustache style delimiters
      var origSettings = _.templateSettings;
      _.templateSettings = {
        interpolate: /\{\{(.+?)\}\}/g
      };
      var id = _.template(opts.id, obj);
      _.templateSettings = origSettings;
    }

    // Build the document to insert
    var thisEvent = monitor.getLast();
    var doc = _.extendDeep({
      _id: id,
      moduleName: monitor.getModuleName(),
      monitorName: monitor.getName(),
      date: new Date(thisEvent.timestamp).toUTCString(),
      timestamp: thisEvent.timestamp
    }, config.dbDoc);

    if (thisEvent.isError) {
      doc.isError = true;
      doc.error = data;
    } else {
      doc.isEvent = true;
      doc.value = value;
      doc.error = data;
    }

    // If mock is requested, return the document now
    if (opts.mock) {
      doc._rev = "1";
      callback && callback(null, doc);
      return;
    }

    // Insert the document
    db.save(doc, callback);

  };

  // Return the logger function
  return loggerFunction;

};
